// Tier-1 JWT Auth Helper for Voice Mode
import axios from 'axios';

// Use the pre-generated valid JWT token for local development
// This token is signed with the actual JWT_SECRET and valid for 7 days
// Generated by: backend/reasoning-gateway/scripts/generate-dev-token.js
const generateDevToken = () => {
  // This is a properly signed JWT token with admin role, valid for 7 days
  // To regenerate: cd backend/reasoning-gateway && node scripts/generate-dev-token.js
  return 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkZXYtdXNlci1sb2NhbCIsImlkIjoiZGV2LXVzZXItaWQiLCJyb2xlIjoiYWRtaW4iLCJyb2xlcyI6WyJhZG1pbiIsInVzZXIiXSwibmFtZSI6IkxvY2FsIERldiBVc2VyIiwiZW1haWwiOiJkZXZAbGl2aGFuYS5sb2NhbCIsImlhdCI6MTc1OTM1NzI3MywiZXhwIjoxNzU5OTYyMDczLCJhdWQiOiJsaXZoYW5hLWxvY2FsIiwiaXNzIjoibGl2aGFuYS1sb2NhbCJ9.y2EPiP89SwS2yY7aE9Io0cygBH-4u2eBmhXQz_mOO6Y';
};

// Get or generate a session JWT token
export const getSessionToken = () => {
  // In production, this would fetch from your auth service
  // For local dev, we'll generate a valid JWT structure
  const token = localStorage.getItem('livhana_session_token');

  // Check if token exists and is not expired
  if (token) {
    try {
      const parts = token.split('.');
      if (parts.length === 3) {
        const payload = JSON.parse(atob(parts[1].replace(/-/g, '+').replace(/_/g, '/')));
        if (payload.exp && payload.exp > Math.floor(Date.now() / 1000)) {
          return token;
        }
      }
    } catch (e) {
      // Invalid token, generate new one
    }
  }

  const newToken = generateDevToken();
  localStorage.setItem('livhana_session_token', newToken);
  return newToken;
};

// Configure axios defaults
export const configureAxiosAuth = () => {
  const token = getSessionToken();
  
  // Set default auth header
  axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
  
  // Add request interceptor to ensure auth on all requests
  axios.interceptors.request.use(
    (config) => {
      if (!config.headers['Authorization']) {
        config.headers['Authorization'] = `Bearer ${getSessionToken()}`;
      }
      // Add request ID for tracing
      config.headers['x-request-id'] = `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      return config;
    },
    (error) => Promise.reject(error)
  );
  
  // Add response interceptor for auth errors
  axios.interceptors.response.use(
    (response) => response,
    (error) => {
      if (error.response?.status === 401) {
        // Clear invalid token
        localStorage.removeItem('livhana_session_token');
        // In production, redirect to login
        console.error('Authentication failed - please refresh');
      }
      return Promise.reject(error);
    }
  );
};

// Initialize auth on app load
configureAxiosAuth();
// Last optimized: 2025-10-02

// Optimized: 2025-10-02

// Last updated: 2025-10-02
