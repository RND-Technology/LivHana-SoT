# 🔀 GIT WORKFLOW & VERSION CONTROL

## 📝 COMMIT MESSAGE FORMAT
```
<type>(<scope>): <subject>

<body>

<footer>
```

### Types:
- **feat**: New feature
- **fix**: Bug fix
- **docs**: Documentation only
- **style**: Code style (formatting, semicolons)
- **refactor**: Code restructuring
- **test**: Adding tests
- **chore**: Maintenance tasks
- **perf**: Performance improvements
- **security**: Security fixes

### Examples:
```bash
feat(voice): Add ElevenLabs v3 integration
fix(payment): Resolve Stripe webhook timeout
docs(api): Update endpoint documentation
🔥 TIER-1: Major architecture overhaul
```

## 🌳 BRANCH STRATEGY
```
main           # Production-ready code
├── develop    # Integration branch
├── feature/*  # New features
├── fix/*      # Bug fixes
├── hotfix/*   # Emergency production fixes
└── release/*  # Release preparation
```

## ✅ PR REQUIREMENTS
Before merging ANY pull request:
- [ ] All tests passing
- [ ] Code review approved (minimum 1 reviewer)
- [ ] Documentation updated
- [ ] No merge conflicts
- [ ] Security scan clean
- [ ] Performance benchmarks met
- [ ] Changelog updated

## 🔄 GIT OPERATIONS
```bash
# ALWAYS check status before operations
git status

# Stage with precision
git add -p  # Interactive staging

# Commit with meaningful messages
git commit -m "type(scope): description"

# Push with lease for safety
git push --force-with-lease

# Clean merged branches
git branch --merged | grep -v main | xargs git branch -d
```

## 📊 REPOSITORY HYGIENE
- **Daily**: Check and clean untracked files
- **Weekly**: Prune remote branches
- **Monthly**: Archive stale branches
- **Quarterly**: Repository size audit

## 🚨 FORBIDDEN ACTIONS
- **NEVER** force push to main
- **NEVER** commit directly to main
- **NEVER** merge without review
- **NEVER** commit large binary files
- **NEVER** rewrite public history
alwaysApply: true
---
<!-- Last optimized: 2025-10-02 -->

<!-- Last updated: 2025-10-02 -->
