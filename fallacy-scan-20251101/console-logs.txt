backend/journey-optimizer/src/index.js:  console.log(`🎯 Journey Optimizer running on port ${PORT}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:          console.error('❌ Invalid webhook signature');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:        console.log('✅ Webhook signature verified');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:        console.log(`📬 Received event: ${eventType}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:        console.error('❌ Webhook processing error:', error.message);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:        console.log('🧪 Test webhook triggered');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:    console.log(`🛒 Processing order: ${orderData.id}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:        console.log('🚚 Order requires delivery - triggering delivery workflow');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:        console.log('🏪 Order is pickup - no delivery needed');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`✅ Order processed: ${order.orderId}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.error('❌ Order processing error:', error.message);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`✅ Delivery created: ${response.data.deliveryId}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`💰 Estimated cost: $${response.data.estimatedCost}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`⏱️  Estimated time: ${response.data.estimatedTime} minutes`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.error('❌ Delivery service error:', error.message);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`✅ Stored order to BigQuery: ${order.orderId}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.error('❌ BigQuery insert error:', error.message);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log('🎧 Lightspeed Webhook Listener');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`✅ Listening on port ${this.port}`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`📬 Webhook URL: http://localhost:${this.port}/webhook/lightspeed`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`🧪 Test URL: http://localhost:${this.port}/webhook/test`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log(`🔒 HMAC validation: ENABLED`);
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:      console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/integration-service/1.6.2.1_lightspeed-webhook-listener_20251008.js:    console.log('🛑 Shutting down gracefully...');
backend/integration-service/common/logging/index.js:    info: (message, meta = {}) => console.log(`[${name}] INFO: ${message}`, meta),
backend/integration-service/common/logging/index.js:    error: (message, meta = {}) => console.error(`[${name}] ERROR: ${message}`, meta),
backend/integration-service/common/logging/index.js:    debug: (message, meta = {}) => console.log(`[${name}] DEBUG: ${message}`, meta)
backend/customer-intelligence/src/index.js:  console.log(`🧠 Customer Intelligence running on port ${PORT}`);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Realtime revenue query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Monthly revenue query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Daily revenue query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Summary query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Customer segments query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ High-value customers query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ At-risk customers query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ LTV leaderboard query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Re-order predictions query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Model performance query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Product recommendations query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Product performance query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Top sellers query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Demand forecast query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Path to 100K query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Content correlation query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:    console.error('❌ Delivery cost query failed:', error.message);
backend/analytics-engine/src/dashboard-api.js:  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/analytics-engine/src/dashboard-api.js:  console.log('📊 Analytics Dashboard API');
backend/analytics-engine/src/dashboard-api.js:  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/analytics-engine/src/dashboard-api.js:  console.log(`✅ Listening on port ${PORT}`);
backend/analytics-engine/src/dashboard-api.js:  console.log(`🔗 Health: http://localhost:${PORT}/health`);
backend/analytics-engine/src/dashboard-api.js:  console.log(`📈 Revenue API: http://localhost:${PORT}/api/v1/dashboard/revenue/*`);
backend/analytics-engine/src/dashboard-api.js:  console.log(`👥 Customer API: http://localhost:${PORT}/api/v1/dashboard/customers/*`);
backend/analytics-engine/src/dashboard-api.js:  console.log(`🔮 Predictions API: http://localhost:${PORT}/api/v1/dashboard/predictions/*`);
backend/analytics-engine/src/dashboard-api.js:  console.log(`📦 Products API: http://localhost:${PORT}/api/v1/dashboard/products/*`);
backend/analytics-engine/src/dashboard-api.js:  console.log(`🎯 Path to 100K: http://localhost:${PORT}/api/v1/dashboard/path-to-100k`);
backend/analytics-engine/src/dashboard-api.js:  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/analytics-engine/src/index.js:  console.log(`📊 Analytics Engine running on port ${PORT}`);
backend/compliance-monitor/src/index.js:  console.log(`🛡️ Compliance Monitor running on port ${PORT}`);
backend/delivery-service/test/nash-beating-test.js:  console.log('🏥 Testing health check...');
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ Health check passed:', response.data);
backend/delivery-service/test/nash-beating-test.js:    console.error('❌ Health check failed:', error.message);
backend/delivery-service/test/nash-beating-test.js:  console.log('🏆 Testing Nash-beating provider comparison...');
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ Provider comparison successful');
backend/delivery-service/test/nash-beating-test.js:    console.log(`📊 Available providers: ${data.totalAvailable}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`💰 Savings vs Nash: ${data.savings.message}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`🏅 Recommended provider: ${data.recommendation.name} ($${data.recommendation.cost})`);
backend/delivery-service/test/nash-beating-test.js:      console.log('✅ Nash-beating confirmed: We save money vs Nash/Square');
backend/delivery-service/test/nash-beating-test.js:      console.log('⚠️  Warning: No savings vs Nash detected');
backend/delivery-service/test/nash-beating-test.js:    console.error('❌ Provider comparison failed:', error.response?.data || error.message);
backend/delivery-service/test/nash-beating-test.js:  console.log('💰 Testing single best quote...');
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ Single quote successful');
backend/delivery-service/test/nash-beating-test.js:    console.log(`🏅 Best provider: ${data.name} ($${data.cost})`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`⏱️  Estimated time: ${data.estimatedMinutes} minutes`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`⭐ Rating: ${data.rating}/5`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`🏆 Score: ${data.score}/100`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`💰 Savings: ${data.savings.message}`);
backend/delivery-service/test/nash-beating-test.js:    console.error('❌ Single quote failed:', error.response?.data || error.message);
backend/delivery-service/test/nash-beating-test.js:  console.log('🔌 Testing Lightspeed webhook integration...');
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ Lightspeed webhook successful');
backend/delivery-service/test/nash-beating-test.js:    console.log(`📦 Delivery ID: ${data.deliveryId}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`🚚 Provider: ${data.provider}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`💰 Cost: $${data.cost}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`🔗 Tracking URL: ${data.trackingUrl}`);
backend/delivery-service/test/nash-beating-test.js:    console.error('❌ Lightspeed webhook failed:', error.response?.data || error.message);
backend/delivery-service/test/nash-beating-test.js:  console.log(`📊 Testing delivery status for ${deliveryId}...`);
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ Delivery status successful');
backend/delivery-service/test/nash-beating-test.js:    console.log(`📦 Status: ${data.status}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`👤 Driver: ${data.driverName || 'Not assigned yet'}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`📞 Driver Phone: ${data.driverPhone || 'Not available yet'}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`⏱️  Estimated delivery: ${data.estimatedDelivery} minutes`);
backend/delivery-service/test/nash-beating-test.js:    console.error('❌ Delivery status failed:', error.response?.data || error.message);
backend/delivery-service/test/nash-beating-test.js:  console.log(`❌ Testing delivery cancellation for ${deliveryId}...`);
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ Delivery cancellation successful');
backend/delivery-service/test/nash-beating-test.js:    console.log(`📦 Cancelled: ${data.cancelled}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`💰 Refund amount: $${data.refundAmount}`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`📝 Reason: ${data.reason}`);
backend/delivery-service/test/nash-beating-test.js:    console.error('❌ Delivery cancellation failed:', error.response?.data || error.message);
backend/delivery-service/test/nash-beating-test.js:  console.log('🚀 Starting Nash-beating delivery service end-to-end test...');
backend/delivery-service/test/nash-beating-test.js:  console.log('=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log('❌ Health check failed, stopping tests');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n' + '=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log('❌ Provider comparison failed, stopping tests');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n' + '=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log('❌ Single quote failed, stopping tests');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n' + '=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log('❌ Lightspeed webhook failed, stopping tests');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n' + '=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log('⚠️  Delivery status failed, but continuing...');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n' + '=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log('⚠️  Delivery cancellation failed, but continuing...');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n' + '=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:  console.log('📋 TEST SUMMARY');
backend/delivery-service/test/nash-beating-test.js:  console.log('=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Health Check: PASSED');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Provider Comparison: PASSED');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Single Quote: PASSED');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Lightspeed Webhook: PASSED');
backend/delivery-service/test/nash-beating-test.js:  console.log(statusResult ? '✅ Delivery Status: PASSED' : '⚠️  Delivery Status: FAILED');
backend/delivery-service/test/nash-beating-test.js:  console.log(cancellationResult ? '✅ Delivery Cancellation: PASSED' : '⚠️  Delivery Cancellation: FAILED');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n🏆 NASH-BEATING VALIDATION');
backend/delivery-service/test/nash-beating-test.js:  console.log('=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:    console.log(`✅ CONFIRMED: We save $${comparisonResult.savings.vsNash.toFixed(2)} per order vs Nash/Square`);
backend/delivery-service/test/nash-beating-test.js:    console.log(`✅ CONFIRMED: ${comparisonResult.savings.percentage}% cost reduction`);
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ CONFIRMED: Direct integration eliminates Square intermediary');
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ CONFIRMED: Multi-provider routing provides better options');
backend/delivery-service/test/nash-beating-test.js:    console.log('✅ CONFIRMED: Real-time quotes beat Nash\'s static pricing');
backend/delivery-service/test/nash-beating-test.js:    console.log('⚠️  WARNING: Nash-beating validation inconclusive');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n🚀 DEPLOYMENT READINESS');
backend/delivery-service/test/nash-beating-test.js:  console.log('=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ API endpoints functional');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Provider integration working');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Cost optimization confirmed');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Lightspeed webhook integration ready');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ End-to-end order flow validated');
backend/delivery-service/test/nash-beating-test.js:  console.log('✅ Nash-beating features operational');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n🎯 NEXT STEPS');
backend/delivery-service/test/nash-beating-test.js:  console.log('=' .repeat(60));
backend/delivery-service/test/nash-beating-test.js:  console.log('1. Deploy to Cloud Run with auto-scaling');
backend/delivery-service/test/nash-beating-test.js:  console.log('2. Configure Lightspeed webhook URL');
backend/delivery-service/test/nash-beating-test.js:  console.log('3. Set up monitoring and alerting');
backend/delivery-service/test/nash-beating-test.js:  console.log('4. Launch customer-facing delivery options');
backend/delivery-service/test/nash-beating-test.js:  console.log('5. Monitor cost savings vs Nash/Square');
backend/delivery-service/test/nash-beating-test.js:  console.log('\n🏁 NASH-BEATING DELIVERY SERVICE READY FOR PRODUCTION! 🏁');
backend/delivery-service/test/nash-beating-test.js:runEndToEndTest().catch(console.error);
backend/delivery-service/src/end-to-end-testing.js:  console.log('🧪 Testing Lightspeed webhook integration...');
backend/delivery-service/src/end-to-end-testing.js:      console.log('✅ Lightspeed webhook test passed');
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Delivery ID: ${response.data.deliveryId}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Provider: ${response.data.provider}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Cost: $${response.data.cost}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Savings: ${response.data.savings.message}`);
backend/delivery-service/src/end-to-end-testing.js:      console.error('❌ Lightspeed webhook test failed:', response.data.error);
backend/delivery-service/src/end-to-end-testing.js:    console.error('❌ Lightspeed webhook test error:', error.message);
backend/delivery-service/src/end-to-end-testing.js:  console.log('🧪 Testing provider comparison API...');
backend/delivery-service/src/end-to-end-testing.js:      console.log('✅ Provider comparison test passed');
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Available providers: ${response.data.totalAvailable}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Recommendation: ${response.data.recommendation.name}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Savings: ${response.data.savings.message}`);
backend/delivery-service/src/end-to-end-testing.js:        console.log(`✅ Cost savings validated: $${savings.toFixed(2)}`);
backend/delivery-service/src/end-to-end-testing.js:        console.error(`❌ Insufficient savings: $${savings.toFixed(2)} (expected $4.00+)`);
backend/delivery-service/src/end-to-end-testing.js:      console.error('❌ Provider comparison test failed:', response.data.error);
backend/delivery-service/src/end-to-end-testing.js:    console.error('❌ Provider comparison test error:', error.message);
backend/delivery-service/src/end-to-end-testing.js:  console.log('🧪 Testing smart routing algorithm...');
backend/delivery-service/src/end-to-end-testing.js:    console.log(`   Testing: ${scenario.name}`);
backend/delivery-service/src/end-to-end-testing.js:          console.log(`   ✅ ${scenario.name}: $${savings.toFixed(2)} savings (expected $${expectedMin}-$${expectedMax})`);
backend/delivery-service/src/end-to-end-testing.js:          console.error(`   ❌ ${scenario.name}: $${savings.toFixed(2)} savings (expected $${expectedMin}-$${expectedMax})`);
backend/delivery-service/src/end-to-end-testing.js:        console.error(`   ❌ ${scenario.name}: No provider selected`);
backend/delivery-service/src/end-to-end-testing.js:      console.error(`   ❌ ${scenario.name}: ${error.message}`);
backend/delivery-service/src/end-to-end-testing.js:  console.log('✅ Smart routing algorithm test passed');
backend/delivery-service/src/end-to-end-testing.js:  console.log('🧪 Testing cost optimization...');
backend/delivery-service/src/end-to-end-testing.js:      console.log('✅ Cost optimization test passed');
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Average savings: $${analysis.averageSavings.toFixed(2)}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Total orders analyzed: ${analysis.totalOrders}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Recommendations: ${analysis.recommendations.join(', ')}`);
backend/delivery-service/src/end-to-end-testing.js:      console.error(`❌ Insufficient average savings: $${analysis.averageSavings.toFixed(2)} (expected $4.00+)`);
backend/delivery-service/src/end-to-end-testing.js:    console.error('❌ Cost optimization test error:', error.message);
backend/delivery-service/src/end-to-end-testing.js:  console.log('🧪 Testing failover mechanism...');
backend/delivery-service/src/end-to-end-testing.js:      console.log('✅ Failover mechanism test passed');
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Fallback provider: ${result.best.provider}`);
backend/delivery-service/src/end-to-end-testing.js:      console.log(`   Cost: $${result.best.cost}`);
backend/delivery-service/src/end-to-end-testing.js:      console.error('❌ Failover mechanism test failed - no fallback provider');
backend/delivery-service/src/end-to-end-testing.js:    console.error('❌ Failover mechanism test error:', error.message);
backend/delivery-service/src/end-to-end-testing.js:  console.log('🚀 Starting comprehensive end-to-end tests...');
backend/delivery-service/src/end-to-end-testing.js:  console.log('');
backend/delivery-service/src/end-to-end-testing.js:    console.log(`\n📋 Running ${test.name} test...`);
backend/delivery-service/src/end-to-end-testing.js:  console.log('\n📊 Test Results Summary:');
backend/delivery-service/src/end-to-end-testing.js:  console.log('========================');
backend/delivery-service/src/end-to-end-testing.js:    console.log(`${status} ${result.name}`);
backend/delivery-service/src/end-to-end-testing.js:  console.log(`\n🎯 Overall: ${passed}/${tests.length} tests passed`);
backend/delivery-service/src/end-to-end-testing.js:    console.log('🏆 ALL TESTS PASSED - Nash-beating delivery middleware ready for production!');
backend/delivery-service/src/end-to-end-testing.js:    console.log('💰 Estimated savings: $50+ per order vs Nash/Square');
backend/delivery-service/src/end-to-end-testing.js:    console.log(`⚠️  ${failed} tests failed - review and fix before production deployment`);
backend/delivery-service/src/lightspeed-webhook-listener.js:    console.log(`🚚 Processing Lightspeed order ${order.id} for delivery`);
backend/delivery-service/src/lightspeed-webhook-listener.js:      console.error(`❌ No delivery providers available for order ${order.id}`);
backend/delivery-service/src/lightspeed-webhook-listener.js:    console.log(`✅ Delivery created: ${delivery.deliveryId} via ${quote.provider} for $${quote.cost}`);
backend/delivery-service/src/lightspeed-webhook-listener.js:    console.error('Lightspeed webhook error:', error);
backend/delivery-service/src/lightspeed-webhook-listener.js:    console.error('Test webhook error:', error);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('DoorDash quote error:', error.response?.data || error.message);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('Uber quote error:', error.response?.data || error.message);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('Provider comparison error:', error);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('Quote error:', error);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('Lightspeed webhook error:', error);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('Status check error:', error);
backend/delivery-service/src/nash-beating-middleware.js:    console.error('Cancellation error:', error);
backend/delivery-service/src/provider-comparison.js:        console.error(`Provider ${key} error:`, error.message);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error('Lightspeed webhook error:', error);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error('Quote error:', error);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error('Provider comparison error:', error);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error('Create delivery error:', error);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error('Status error:', error);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error('Cancel error:', error);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.log(`Creating delivery with ${bestProvider.provider} (score: ${bestProvider.score})...`);
backend/delivery-service/src/lightspeed-delivery-middleware.js:    console.error(`${bestProvider.provider} failed:`, error.message);
backend/delivery-service/src/lightspeed-delivery-middleware.js:        console.log(`Failing over to ${provider.provider} (score: ${provider.score})...`);
backend/delivery-service/src/lightspeed-delivery-middleware.js:        console.error(`${provider.provider} also failed:`, fallbackError.message);
backend/delivery-service/src/index.js:  console.log(`${new Date().toISOString()} ${req.method} ${req.path}`);
backend/delivery-service/src/index.js:    console.log('🧪 Running end-to-end tests...');
backend/delivery-service/src/index.js:  console.error('Unhandled error:', error);
backend/delivery-service/src/index.js:  console.log('🚀 Nash-Beating Delivery Service started');
backend/delivery-service/src/index.js:  console.log(`📍 Port: ${PORT}`);
backend/delivery-service/src/index.js:  console.log(`🌍 Environment: ${process.env.NODE_ENV || 'development'}`);
backend/delivery-service/src/index.js:  console.log(`🎯 Mission: Beat Nash/Square with direct integration`);
backend/delivery-service/src/index.js:  console.log(`💰 Target savings: $50+ per order`);
backend/delivery-service/src/index.js:  console.log('');
backend/delivery-service/src/index.js:  console.log('📡 Available endpoints:');
backend/delivery-service/src/index.js:  console.log('   GET  /health - Health check');
backend/delivery-service/src/index.js:  console.log('   POST /api/delivery/quote - Get best delivery quote');
backend/delivery-service/src/index.js:  console.log('   POST /api/delivery/providers/compare - Compare all providers');
backend/delivery-service/src/index.js:  console.log('   POST /api/delivery/create - Create delivery order');
backend/delivery-service/src/index.js:  console.log('   GET  /api/delivery/status/:deliveryId - Get delivery status');
backend/delivery-service/src/index.js:  console.log('   POST /api/delivery/cancel - Cancel delivery');
backend/delivery-service/src/index.js:  console.log('   POST /api/delivery/lightspeed/webhook - Lightspeed webhook');
backend/delivery-service/src/index.js:  console.log('   GET  /api/test/end-to-end - Run comprehensive tests');
backend/delivery-service/src/index.js:  console.log('');
backend/delivery-service/src/index.js:  console.log('🔧 Configuration:');
backend/delivery-service/src/index.js:  console.log(`   DoorDash: ${process.env.DOORDASH_DEVELOPER_ID ? '✅ Configured' : '❌ Missing'}`);
backend/delivery-service/src/index.js:  console.log(`   Uber: ${process.env.UBER_API_KEY ? '✅ Configured' : '❌ Missing'}`);
backend/delivery-service/src/index.js:  console.log(`   Lightspeed: ${process.env.LIGHTSPEED_API_TOKEN ? '✅ Configured' : '❌ Missing'}`);
backend/delivery-service/src/index.js:  console.log('');
backend/delivery-service/src/index.js:  console.log('🚀 Ready to beat Nash!');
backend/reasoning-gateway/common/logging/index.js:    info: (message, meta = {}) => console.log(`[${name}] INFO: ${message}`, meta),
backend/reasoning-gateway/common/logging/index.js:    error: (message, meta = {}) => console.error(`[${name}] ERROR: ${message}`, meta),
backend/reasoning-gateway/common/logging/index.js:    debug: (message, meta = {}) => console.log(`[${name}] DEBUG: ${message}`, meta)
backend/reasoning-gateway/src/index.js:  console.log(`🧠 Reasoning Gateway running on port ${PORT}`);
backend/reasoning-gateway/src/index.js:  console.log(`✅ Anthropic: ${process.env.ANTHROPIC_API_KEY ? 'Configured' : 'Not configured'}`);
backend/reasoning-gateway/src/index.js:  console.log(`✅ OpenAI: ${process.env.OPENAI_API_KEY ? 'Configured' : 'Not configured'}`);
backend/reasoning-gateway/src/index.js:  console.log(`✅ Redis: ${process.env.REDIS_HOST || 'localhost'}:${process.env.REDIS_PORT || 6379}`);
backend/reasoning-gateway/src/index.js:  console.log(`✅ Queue: ${REASONING_QUEUE_NAME}`);
backend/voice-service/src/routers/reasoning-router.js:    console.error('Reasoning enqueue error:', error);
backend/voice-service/src/routers/reasoning-router.js:    console.error('Reasoning result error:', error);
backend/voice-service/src/routers/reasoning-router.js:    console.error('Reasoning stream error:', error);
backend/voice-service/src/routers/reasoning-router.js:    console.error('Reasoning cancel error:', error);
backend/voice-service/src/routers/reasoning-router.js:    console.error('Reasoning stats error:', error);
backend/voice-service/src/routers/elevenlabs-router.js:    console.error('ElevenLabs synthesis error:', error);
backend/voice-service/src/routers/elevenlabs-router.js:    console.error('ElevenLabs voices error:', error);
backend/voice-service/src/routers/elevenlabs-router.js:    console.error('ElevenLabs models error:', error);
backend/voice-service/src/index.js:  console.error('[ERROR]', {
backend/voice-service/src/index.js:  console.log('');
backend/voice-service/src/index.js:  console.log('🎙️  ═══════════════════════════════════════════');
backend/voice-service/src/index.js:  console.log('    UNIFIED VOICE PIPELINE - THE 11 LAWS');
backend/voice-service/src/index.js:  console.log('    ═══════════════════════════════════════════');
backend/voice-service/src/index.js:  console.log(`    Port: ${PORT}`);
backend/voice-service/src/index.js:  console.log(`    Mode: ${process.env.NODE_ENV || 'production'}`);
backend/voice-service/src/index.js:  console.log('    ───────────────────────────────────────────');
backend/voice-service/src/index.js:  console.log(`    ✅ Law 1: Single Channel (Port ${PORT})`);
backend/voice-service/src/index.js:  console.log('    ✅ Law 2: Zero Latency Optimized');
backend/voice-service/src/index.js:  console.log('    ✅ Law 3: 100% Uptime Target');
backend/voice-service/src/index.js:  console.log('    ✅ Law 4: Verification Enabled');
backend/voice-service/src/index.js:  console.log('    ✅ Law 5: No Script Conflicts');
backend/voice-service/src/index.js:  console.log('    ✅ Law 6: Clear Error Messages');
backend/voice-service/src/index.js:  console.log('    ✅ Law 7: Health Monitoring Active');
backend/voice-service/src/index.js:  console.log('    ✅ Law 8: Secrets Protected');
backend/voice-service/src/index.js:  console.log('    ✅ Law 9: Performance Tracked');
backend/voice-service/src/index.js:  console.log('    ✅ Law 10: Graceful Degradation Ready');
backend/voice-service/src/index.js:  console.log('    ✅ Law 11: Instant Recovery Enabled');
backend/voice-service/src/index.js:  console.log('    ═══════════════════════════════════════════');
backend/voice-service/src/index.js:  console.log(`    🔑 ElevenLabs: ${process.env.ELEVENLABS_API_KEY ? '✅ Ready' : '❌ Not configured'}`);
backend/voice-service/src/index.js:  console.log(`    🧠 Reasoning: ${process.env.REASONING_GATEWAY_BASE_URL || 'http://localhost:4002'}`);
backend/voice-service/src/index.js:  console.log(`    📦 Redis: ${process.env.REDIS_HOST || 'localhost'}:${process.env.REDIS_PORT || 6379}`);
backend/voice-service/src/index.js:  console.log('    ═══════════════════════════════════════════');
backend/voice-service/src/index.js:  console.log('');
backend/voice-service/src/index.js:  console.log('📴 SIGTERM received. Shutting down gracefully...');
backend/voice-service/src/index.js:    console.log('✅ Server closed');
backend/voice-service/src/index.js:  console.log('📴 SIGINT received. Shutting down gracefully...');
backend/voice-service/src/index.js:    console.log('✅ Server closed');
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:      console.log('🧪 MOCK MODE: Returning sample viral patterns');
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:      console.log(`✅ Found ${videos.length} videos for query: "${query}"`);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:      console.error('❌ YouTube API error:', error.message);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:      console.log(`✅ Stored ${rows.length} viral patterns to BigQuery`);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:      console.error('❌ BigQuery insert error:', error.message);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.log(`🔍 Starting viral pattern analysis for: "${query}"`);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.log('✅ Analysis complete!');
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.log(`📊 Average engagement rate: ${patterns.averageEngagement.toFixed(2)}%`);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.log(`🏆 Top performer: ${patterns.topPerformers[0].title}`);
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.error('❌ YOUTUBE_API_KEY environment variable required');
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.error('💡 Get your API key from: https://console.cloud.google.com/apis/credentials');
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:    console.error('💡 Add to .env.master: YOUTUBE_API_KEY=op://LivHana-Ops-Keys/YOUTUBE_API_KEY/credential');
backend/analytics-service/1.6.3.1_youtube-analyzer-integration_20251008.js:      console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log('🧪 MOCK MODE: Returning sample cannabis news');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`✅ Fetched ${articles.length} cannabis news articles`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.error('❌ NewsAPI error:', error.message);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`✅ Stored ${rows.length} articles to BigQuery`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.error('❌ BigQuery insert error:', error.message);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log('📰 Starting cannabis news pipeline...');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log(`✅ Filtered to ${qualityArticles.length} quality articles`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log('📊 Categories:', Object.entries(categorized).map(([cat, arts]) =>
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log(`✅ Extracted ${hooks.length} story hooks`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.error('❌ NEWSAPI_KEY environment variable required');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.error('💡 Get your API key from: https://newsapi.org/register');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.error('💡 Add to .env.master: NEWSAPI_KEY=op://LivHana-Ops-Keys/NEWSAPI_KEY/credential');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log('\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log('📊 Pipeline Results:');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log(`   Raw articles: ${results.rawCount}`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log(`   Quality articles: ${results.qualityCount}`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log(`   Top story hooks: ${results.hooks.length}`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:    console.log('\n🏆 Top 5 Story Hooks:');
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`\n   ${i + 1}. ${hook.title}`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`      Category: ${hook.category}`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`      Angle: ${hook.angle}`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`      Engagement: ${hook.engagementScore}/100`);
backend/analytics-service/1.6.3.2_newsapi-integration_20251008.js:      console.log(`      TPOPS: ${hook.tpopsAlignment.aligned ? '✅' : '❌'}`);
backend/payment-optimizer/src/index.js:  console.log(`💳 Payment Optimizer running on port ${PORT}`);
backend/inventory-sync/src/index.js:  console.log(`📦 Inventory Sync running on port ${PORT}`);
backend/llm-orchestrator/src/index.js:  console.log(`🚀 LLM Orchestrator running on port ${PORT}`);
backend/content-engine/src/index.js:  console.log(`📝 Content Engine running on port ${PORT}`);
