// ===== EMPIRE EMPIRE CLOUD COCKPIT SCHEMA =====
// Cannabis commerce + gamification + compliance
// TIER-1 Production Ready - Zero Errors

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== USER & AUTHENTICATION =====

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String?   @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  ageVerified   Boolean   @default(false)
  ageVerifiedAt DateTime?

  // Gamification
  xp            Int       @default(0)
  level         Int       @default(1)
  rank          Rank      @default(SEEDLING)

  // Preferences
  preferences   Json?     @db.JsonB

  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?

  // Relations
  missions      UserMission[]
  orders        Order[]
  raffleEntries RaffleEntry[]
  petitions     PetitionSignature[]
  xpEvents      XPEvent[]
  notifications Notification[]

  @@index([email])
  @@index([rank])
  @@map("users")
}

enum Rank {
  SEEDLING      // Level 1-5
  CULTIVATOR    // Level 6-15
  TRUTH_FARMER  // Level 16-30
  WALL_RIDER    // Level 31+
}

// ===== GAMIFICATION SYSTEM =====

model Mission {
  id          String   @id @default(cuid())
  type        MissionType
  title       String
  description String
  xpReward    Int

  // Requirements
  requirements Json    @db.JsonB

  // Content
  videoUrl     String?
  articleUrl   String?
  externalUrl  String?

  // Status
  active       Boolean @default(true)
  startDate    DateTime?
  endDate      DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  completions  UserMission[]

  @@index([type])
  @@index([active])
  @@map("missions")
}

enum MissionType {
  WATCH_EPISODE      // Watch HNC episode
  SIGN_PETITION      // Sign SB3 comment
  COMPLETE_ORDER     // Purchase product
  REFER_FRIEND       // Referral mission
  DAILY_LOGIN        // Login streak
  LEARN_POLICY       // Read OPS content
  SHARE_CONTENT      // Social media share
}

model UserMission {
  id          String   @id @default(cuid())
  userId      String
  missionId   String

  completed   Boolean  @default(false)
  completedAt DateTime?
  progress    Int      @default(0)

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission     Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
  @@index([userId])
  @@index([completed])
  @@map("user_missions")
}

model XPEvent {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  source    String   // mission_id, order_id, etc
  reason    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("xp_events")
}

// ===== COMMERCE SYSTEM =====

model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  description String?

  // Pricing
  price       Decimal  @db.Decimal(10, 2)
  salePrice   Decimal? @db.Decimal(10, 2)

  // Inventory
  stock       Int      @default(0)
  lowStock    Int      @default(10)

  // Cannabis specific
  thcPercent  Decimal? @db.Decimal(5, 2)
  cbdPercent  Decimal? @db.Decimal(5, 2)
  coaUrl      String?
  coaVerified Boolean  @default(false)

  // Herbitrage metrics
  greeks      Json?    @db.JsonB // Delta, Theta, Gamma, Vega

  // Images
  images      String[] @default([])
  thumbnail   String?

  // Status
  active      Boolean  @default(true)
  featured    Boolean  @default(false)

  // Metadata
  category    String?
  tags        String[] @default([])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems  OrderItem[]

  @@index([sku])
  @@index([active])
  @@index([featured])
  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  orderNumber   String      @unique

  // Totals
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @db.Decimal(10, 2)
  shipping      Decimal     @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)

  // Status
  status        OrderStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)

  // Fulfillment
  location      String?     // "Alice" or "San Marcos"
  notes         String?

  // Timestamps
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  completedAt   DateTime?

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String

  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  subtotal  Decimal @db.Decimal(10, 2)

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

// ===== RAFFLE SYSTEM =====

model Raffle {
  id            String   @id @default(cuid())
  title         String
  description   String
  prizeItem     String   // "Blue Dream Pre-Roll"
  prizeValue    Decimal  @db.Decimal(10, 2)

  // Requirements
  minXpRequired Int      @default(0)
  minRank       Rank?

  // Schedule
  startDate     DateTime
  endDate       DateTime
  drawDate      DateTime

  // Status
  active        Boolean  @default(true)
  drawn         Boolean  @default(false)
  winnerId      String?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  entries       RaffleEntry[]

  @@index([active])
  @@index([endDate])
  @@map("raffles")
}

model RaffleEntry {
  id        String   @id @default(cuid())
  raffleId  String
  userId    String

  createdAt DateTime @default(now())

  raffle    Raffle   @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([raffleId, userId])
  @@index([raffleId])
  @@map("raffle_entries")
}

// ===== POLICY & ADVOCACY =====

model Petition {
  id          String   @id @default(cuid())
  title       String
  description String
  targetBody  String   // "Texas Legislature"
  billNumber  String?  // "SB3"

  goal        Int      // Target signatures
  current     Int      @default(0)

  active      Boolean  @default(true)
  startDate   DateTime
  endDate     DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  signatures  PetitionSignature[]

  @@index([active])
  @@map("petitions")
}

model PetitionSignature {
  id         String   @id @default(cuid())
  petitionId String
  userId     String

  comment    String?

  signedAt   DateTime @default(now())

  petition   Petition @relation(fields: [petitionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([petitionId, userId])
  @@index([petitionId])
  @@map("petition_signatures")
}

// ===== CONTENT & MEDIA =====

model Episode {
  id          String   @id @default(cuid())
  episodeNum  Int      @unique
  title       String
  description String?

  // YouTube
  youtubeId   String   @unique
  youtubeUrl  String

  // Musical metadata
  bpm         Int?
  key         String?
  mood        String?

  // Status
  published   Boolean  @default(false)
  publishedAt DateTime?

  // Stats
  views       Int      @default(0)
  likes       Int      @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([episodeNum])
  @@index([published])
  @@map("episodes")
}

// ===== NOTIFICATIONS =====

model Notification {
  id        String   @id @default(cuid())
  userId    String

  type      NotificationType
  title     String
  message   String
  data      Json?    @db.JsonB

  read      Boolean  @default(false)
  readAt    DateTime?

  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

enum NotificationType {
  MISSION_COMPLETE
  LEVEL_UP
  XP_REWARD
  ORDER_CONFIRMED
  RAFFLE_WIN
  PETITION_MILESTONE
  EPISODE_RELEASE
}
