#!/bin/bash
# Liv Hana Absolute – Sonnet Recovery Bootstrap
# Purpose: restart a stalled Tier-1 Sonnet session under Codex orchestration,
# replay the mandatory boot sequence, capture live evidence, and surface
# outstanding production blockers (voice, reasoning, video, real data).

set -euo pipefail

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
ROOT_DIR=$(cd "$SCRIPT_DIR/.." && pwd)
SESSION_PROGRESS="$SCRIPT_DIR/SESSION_PROGRESS.md"
TIMESTAMP="$(date '+%Y-%m-%d %H:%M:%S %Z')"

log_step() {
  local message="$1"
  printf '\n[%s] %s\n' "$TIMESTAMP" "$message"
  printf '\n[%s] %s\n' "$TIMESTAMP" "$message" >>"$SESSION_PROGRESS"
}

run_cmd() {
  local description="$1"
  shift
  log_step "$description"
  (cd "$ROOT_DIR" && "$@") | tee -a "$SESSION_PROGRESS"
  printf '\n' >>"$SESSION_PROGRESS"
}

log_step "=== SONNET RECOVERY BOOTSTRAP START ==="

# 0. Environment validation
log_step "Validating core tooling (op, gcloud, jq, curl)"
for tool in op gcloud jq curl; do
  if ! command -v "$tool" >/dev/null 2>&1; then
    log_step "⚠️ Missing dependency: $tool (install before resuming Tier-1 session)"
  fi
done

# 1. Mandatory document acknowledgement
log_step "Replaying mandatory boot sequence documents"
for doc in \
  "$SCRIPT_DIR/LEARNING_LEDGER.md" \
  "$SCRIPT_DIR/VERIFICATION_REQUIRED.md" \
  "$SCRIPT_DIR/HONESTY_CONSTRAINTS.md" \
  "$SCRIPT_DIR/ULTIMATE_FUSION_STARTUP.md" \
  "$SCRIPT_DIR/COMMANDER_CODEX_ORDERS.md" \
  "$SCRIPT_DIR/CURRENT_SESSION_STATE.md"; do
  run_cmd "cat $(basename "$doc")" cat "$doc"
done

# 2. Live system snapshot
log_step "Capturing live system snapshot"
if [ -x "$ROOT_DIR/START.sh" ]; then
  run_cmd "./START.sh status" ./START.sh status || true
else
  log_step "⚠️ START.sh missing or not executable"
fi

if [ -f "$SCRIPT_DIR/ULTIMATE_STATE.md" ]; then
  run_cmd "cat .claude/ULTIMATE_STATE.md" cat "$SCRIPT_DIR/ULTIMATE_STATE.md"
fi

run_cmd "git status --short" git status --short

# 3. Full verification sweep
if [ -x "$ROOT_DIR/scripts/run_full_sweep.sh" ]; then
  log_step "Running scripts/run_full_sweep.sh"
  (cd "$ROOT_DIR" && bash scripts/run_full_sweep.sh) | tee -a "$SESSION_PROGRESS" || {
    log_step "❌ Full sweep failed – review output above before continuing"
    exit 1
  }
else
  log_step "⚠️ scripts/run_full_sweep.sh missing or not executable"
fi

# 4. Cloud Run deployment verification (integration + frontend)
if command -v gcloud >/dev/null 2>&1; then
  log_step "Checking Cloud Run service integration-service"
  (cd "$ROOT_DIR" && gcloud run services describe integration-service --region us-central1 --project reggieanddrodispensary --format='value(status.conditions[0].status)') 2>&1 | tee -a "$SESSION_PROGRESS" || log_step "⚠️ Unable to describe integration-service"

  log_step "Checking Cloud Run service vibe-cockpit"
  (cd "$ROOT_DIR" && gcloud run services describe vibe-cockpit --region us-central1 --project reggieanddrodispensary --format='value(status.conditions[0].status)') 2>&1 | tee -a "$SESSION_PROGRESS" || log_step "⚠️ Unable to describe vibe-cockpit"
else
  log_step "⚠️ gcloud CLI not available – skip Cloud Run verification"
fi

# 5. Public endpoint health checks
log_step "Curling integration-service health"
curl -sS https://integration-service-980910443251.us-central1.run.app/health | tee -a "$SESSION_PROGRESS" || log_step "⚠️ integration-service health check failed"

log_step "Curling vibe-cockpit root"
curl -sSI https://vibe-cockpit-980910443251.us-central1.run.app | tee -a "$SESSION_PROGRESS" || log_step "⚠️ vibe-cockpit curl failed"

# 6. Voice / Reasoning diagnostics
log_step "Testing Voice API placeholder (expects 401 if auth missing)"
VOICE_BASE=${VITE_VOICE_API_BASE:-""}
if [ -n "$VOICE_BASE" ]; then
  curl -sS -o /dev/null -w 'HTTP %status\n' "${VOICE_BASE%/}/health/voice-mode" || log_step "⚠️ Voice mode health endpoint unreachable"
else
  log_step "⚠️ VITE_VOICE_API_BASE not set – frontend falling back to localhost"
fi

log_step "Testing Reasoning API stream endpoint"
REASONING_BASE=${VITE_REASONING_API_BASE:-""}
if [ -n "$REASONING_BASE" ]; then
  curl -sS -o /dev/null -w 'HTTP %status\n' "${REASONING_BASE%/}/health" || log_step "⚠️ Reasoning API health endpoint unreachable"
else
  log_step "⚠️ VITE_REASONING_API_BASE not set – reasoning hooks will hit /api/reasoning (likely 404)"
fi

# 7. Flag outstanding production blockers file
BLOCKER_FILE="$SCRIPT_DIR/OUTSTANDING_BLOCKERS.md"
cat >"$BLOCKER_FILE" <<BLOCKERS
# Liv Hana Production Blockers (Autogenerated)

- Voice Mode: No authenticated ElevenLabs proxy deployed; frontend points to localhost fallback.
- Reasoning Stream: `/api/reasoning` target missing; SSE stream fails with network error.
- Video Mode: UI placeholder only, lacks backend/WebRTC service.
- Dashboard Metrics: Uses static context data; integrate BigQuery + integration-service before advertising live telemetry.
- Square/LightSpeed Product Data: Requires verified secrets in Cloud Run; confirm endpoints return non-empty payloads.

Generated by sonnet_recovery_boot.sh on $(date '+%Y-%m-%d %H:%M:%S %Z').
BLOCKERS

log_step "Outstanding blockers written to $(basename "$BLOCKER_FILE")"

log_step "=== SONNET RECOVERY BOOTSTRAP COMPLETE ==="
