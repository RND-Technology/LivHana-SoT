{"ast":null,"code":"var _process$env$REACT_AP,\n  _process$env$REACT_AP2,\n  _process$env$REACT_AP3,\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nconst API_BASE = (_process$env$REACT_AP = process.env.REACT_APP_REASONING_API_BASE) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : 'http://localhost:4001/api/reasoning';\nconst HEALTH_BASE = (_process$env$REACT_AP2 = process.env.REACT_APP_HEALTH_API_BASE) !== null && _process$env$REACT_AP2 !== void 0 ? _process$env$REACT_AP2 : 'http://localhost:4001/health';\nconst STREAM_TIMEOUT_MS = Number((_process$env$REACT_AP3 = process.env.REACT_APP_REASONING_STREAM_TIMEOUT_MS) !== null && _process$env$REACT_AP3 !== void 0 ? _process$env$REACT_AP3 : 60000);\nexport const useReasoningJob = () => {\n  _s();\n  const [jobId, setJobId] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const eventSourceRef = useRef(null);\n  const timeoutRef = useRef(null);\n  const reset = useCallback(() => {\n    setJobId(null);\n    setStatus('idle');\n    setResult(null);\n    setError(null);\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n  const streamJob = useCallback(id => {\n    if (!id) return;\n    if (typeof window === 'undefined') {\n      return;\n    }\n    const source = new EventSource(`${API_BASE}/stream/${id}`);\n    eventSourceRef.current = source;\n    timeoutRef.current = setTimeout(() => {\n      source.close();\n      setStatus('timeout');\n      setError('Reasoning job timed out');\n    }, STREAM_TIMEOUT_MS);\n    source.addEventListener('progress', event => {\n      var _event$data;\n      const data = JSON.parse((_event$data = event.data) !== null && _event$data !== void 0 ? _event$data : '{}');\n      setStatus('progress');\n      setResult(prev => {\n        var _data$delta;\n        return {\n          ...prev,\n          partial: (_data$delta = data.delta) !== null && _data$delta !== void 0 ? _data$delta : data,\n          final: prev === null || prev === void 0 ? void 0 : prev.final\n        };\n      });\n    });\n    source.addEventListener('completed', event => {\n      var _event$data2;\n      clearTimeout(timeoutRef.current);\n      const data = JSON.parse((_event$data2 = event.data) !== null && _event$data2 !== void 0 ? _event$data2 : '{}');\n      setStatus('completed');\n      setResult(prev => {\n        var _data$output;\n        return {\n          ...prev,\n          final: (_data$output = data.output) !== null && _data$output !== void 0 ? _data$output : data,\n          partial: prev === null || prev === void 0 ? void 0 : prev.partial\n        };\n      });\n      source.close();\n    });\n    source.addEventListener('failed', event => {\n      var _event$data3, _data$error;\n      clearTimeout(timeoutRef.current);\n      const data = JSON.parse((_event$data3 = event.data) !== null && _event$data3 !== void 0 ? _event$data3 : '{}');\n      setStatus('failed');\n      setError((_data$error = data.error) !== null && _data$error !== void 0 ? _data$error : 'Reasoning job failed');\n      source.close();\n    });\n    source.onerror = () => {\n      clearTimeout(timeoutRef.current);\n      setStatus('error');\n      setError('Stream connection lost');\n      source.close();\n    };\n  }, []);\n  const submitJob = useCallback(async ({\n    prompt,\n    sessionId,\n    metadata\n  }) => {\n    try {\n      setStatus('submitting');\n      setError(null);\n      setResult(null);\n      const response = await axios.post(`${API_BASE}/enqueue`, {\n        prompt,\n        sessionId,\n        metadata\n      });\n      const {\n        jobId: newJobId\n      } = response.data;\n      setJobId(newJobId);\n      setStatus('queued');\n      streamJob(newJobId);\n      return newJobId;\n    } catch (submissionError) {\n      var _submissionError$resp, _submissionError$resp2, _submissionError$resp3;\n      const message = (_submissionError$resp = (_submissionError$resp2 = submissionError.response) === null || _submissionError$resp2 === void 0 ? void 0 : (_submissionError$resp3 = _submissionError$resp2.data) === null || _submissionError$resp3 === void 0 ? void 0 : _submissionError$resp3.error) !== null && _submissionError$resp !== void 0 ? _submissionError$resp : submissionError.message;\n      setStatus('error');\n      setError(message);\n      throw submissionError;\n    }\n  }, [streamJob]);\n  const fetchResult = useCallback(async id => {\n    if (!id) return null;\n    const response = await axios.get(`${API_BASE}/result/${id}`);\n    return response.data;\n  }, []);\n  const fetchHealth = useCallback(async () => {\n    const response = await axios.get(`${HEALTH_BASE}/voice-mode`);\n    return response.data;\n  }, []);\n  useEffect(() => () => reset(), [reset]);\n  return {\n    jobId,\n    status,\n    result,\n    error,\n    submitJob,\n    fetchResult,\n    fetchHealth,\n    reset\n  };\n};\n_s(useReasoningJob, \"/v2m/H/0pJfqImzhFNNPUCOdp2E=\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","axios","API_BASE","_process$env$REACT_AP","process","env","REACT_APP_REASONING_API_BASE","HEALTH_BASE","_process$env$REACT_AP2","REACT_APP_HEALTH_API_BASE","STREAM_TIMEOUT_MS","Number","_process$env$REACT_AP3","REACT_APP_REASONING_STREAM_TIMEOUT_MS","useReasoningJob","_s","jobId","setJobId","status","setStatus","result","setResult","error","setError","eventSourceRef","timeoutRef","reset","current","close","clearTimeout","streamJob","id","window","source","EventSource","setTimeout","addEventListener","event","_event$data","data","JSON","parse","prev","_data$delta","partial","delta","final","_event$data2","_data$output","output","_event$data3","_data$error","onerror","submitJob","prompt","sessionId","metadata","response","post","newJobId","submissionError","_submissionError$resp","_submissionError$resp2","_submissionError$resp3","message","fetchResult","get","fetchHealth"],"sources":["/Users/jesseniesen/LivHana-Trinity-Local/LivHana-SoT/frontend/vibe-cockpit/src/hooks/useReasoningJob.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\n\nconst API_BASE = process.env.REACT_APP_REASONING_API_BASE ?? 'http://localhost:4001/api/reasoning';\nconst HEALTH_BASE = process.env.REACT_APP_HEALTH_API_BASE ?? 'http://localhost:4001/health';\nconst STREAM_TIMEOUT_MS = Number(process.env.REACT_APP_REASONING_STREAM_TIMEOUT_MS ?? 60000);\n\nexport const useReasoningJob = () => {\n  const [jobId, setJobId] = useState(null);\n  const [status, setStatus] = useState('idle');\n  const [result, setResult] = useState(null);\n  const [error, setError] = useState(null);\n  const eventSourceRef = useRef(null);\n  const timeoutRef = useRef(null);\n\n  const reset = useCallback(() => {\n    setJobId(null);\n    setStatus('idle');\n    setResult(null);\n    setError(null);\n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, []);\n\n  const streamJob = useCallback((id) => {\n    if (!id) return;\n\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const source = new EventSource(`${API_BASE}/stream/${id}`);\n    eventSourceRef.current = source;\n\n    timeoutRef.current = setTimeout(() => {\n      source.close();\n      setStatus('timeout');\n      setError('Reasoning job timed out');\n    }, STREAM_TIMEOUT_MS);\n\n    source.addEventListener('progress', (event) => {\n      const data = JSON.parse(event.data ?? '{}');\n      setStatus('progress');\n      setResult((prev) => ({ ...prev, partial: data.delta ?? data, final: prev?.final }));\n    });\n\n    source.addEventListener('completed', (event) => {\n      clearTimeout(timeoutRef.current);\n      const data = JSON.parse(event.data ?? '{}');\n      setStatus('completed');\n      setResult((prev) => ({ ...prev, final: data.output ?? data, partial: prev?.partial }));\n      source.close();\n    });\n\n    source.addEventListener('failed', (event) => {\n      clearTimeout(timeoutRef.current);\n      const data = JSON.parse(event.data ?? '{}');\n      setStatus('failed');\n      setError(data.error ?? 'Reasoning job failed');\n      source.close();\n    });\n\n    source.onerror = () => {\n      clearTimeout(timeoutRef.current);\n      setStatus('error');\n      setError('Stream connection lost');\n      source.close();\n    };\n  }, []);\n\n  const submitJob = useCallback(async ({ prompt, sessionId, metadata }) => {\n    try {\n      setStatus('submitting');\n      setError(null);\n      setResult(null);\n\n      const response = await axios.post(`${API_BASE}/enqueue`, { prompt, sessionId, metadata });\n      const { jobId: newJobId } = response.data;\n      setJobId(newJobId);\n      setStatus('queued');\n      streamJob(newJobId);\n      return newJobId;\n    } catch (submissionError) {\n      const message = submissionError.response?.data?.error ?? submissionError.message;\n      setStatus('error');\n      setError(message);\n      throw submissionError;\n    }\n  }, [streamJob]);\n\n  const fetchResult = useCallback(async (id) => {\n    if (!id) return null;\n    const response = await axios.get(`${API_BASE}/result/${id}`);\n    return response.data;\n  }, []);\n\n  const fetchHealth = useCallback(async () => {\n    const response = await axios.get(`${HEALTH_BASE}/voice-mode`);\n    return response.data;\n  }, []);\n\n  useEffect(() => () => reset(), [reset]);\n\n  return {\n    jobId,\n    status,\n    result,\n    error,\n    submitJob,\n    fetchResult,\n    fetchHealth,\n    reset,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}