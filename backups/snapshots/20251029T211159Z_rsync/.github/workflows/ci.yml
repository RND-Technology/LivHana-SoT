name: CI/CD Pipeline

on:
  push:
    branches: [main, replit-prototypes-week1]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: Lint and Type Check (Fast)
  lint-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend/integration-service
          - backend/common
          - backend/reasoning-gateway
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Lint
        working-directory: ${{ matrix.service }}
        run: npm run lint

      - name: Type check
        working-directory: ${{ matrix.service }}
        run: npm run typecheck

  # Job 2: Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - backend/integration-service
          - backend/common
          - backend/reasoning-gateway
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ${{ matrix.service }}
        run: npm test
        env:
          NODE_ENV: test

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ${{ matrix.service }}/coverage/lcov.info
          flags: ${{ matrix.service }}

  # Job 3: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run npm audit
        run: |
          cd backend/integration-service && npm audit --audit-level=high
          cd ../common && npm audit --audit-level=high
          cd ../reasoning-gateway && npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Job 4: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-typecheck, test-unit]
    strategy:
      matrix:
        service:
          - name: lightspeed-bigquery
            path: backend/integration-service
          - name: customer-profile
            path: backend/common
          - name: reasoning-gateway
            path: backend/reasoning-gateway
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.path }}
          push: false
          tags: ${{ matrix.service.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-${{ matrix.service.name }} \
            -p 8080:8080 \
            -e NODE_ENV=test \
            ${{ matrix.service.name }}:${{ github.sha }}
          sleep 10
          docker logs test-${{ matrix.service.name }}
          docker stop test-${{ matrix.service.name }}

  # Job 5: Deploy to Cloud Run (main branch only)
  deploy-cloud-run:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service:
          - name: lightspeed-bigquery
            path: backend/integration-service
            port: 8080
          - name: customer-profile
            path: backend/common
            port: 8081
          - name: si-recommendations
            path: backend/reasoning-gateway
            port: 8082
          - name: voice-commerce
            path: backend/reasoning-gateway
            port: 8083
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ matrix.service.name }} \
            --source ${{ matrix.service.path }} \
            --region us-central1 \
            --platform managed \
            --allow-unauthenticated \
            --port ${{ matrix.service.port }} \
            --set-env-vars="NODE_ENV=production" \
            --min-instances=0 \
            --max-instances=10 \
            --memory=512Mi \
            --cpu=1 \
            --timeout=60s \
            --concurrency=80

  # Job 6: Integration Tests (post-deployment)
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-cloud-run]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run integration tests
        run: |
          npm ci
          npm run test:integration
        env:
          INTEGRATION_TEST: true
          BASE_URL: https://lightspeed-bigquery-prod.run.app

  # Job 7: Notify on Success/Failure
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint-typecheck, test-unit, security-audit, build-docker]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'CI/CD Pipeline completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
